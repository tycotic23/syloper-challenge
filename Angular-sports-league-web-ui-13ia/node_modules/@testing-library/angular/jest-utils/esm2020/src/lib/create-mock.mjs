export function createMock(type) {
    const mock = {};
    function mockFunctions(proto) {
        if (!proto) {
            return;
        }
        for (const prop of Object.getOwnPropertyNames(proto)) {
            if (prop === 'constructor') {
                continue;
            }
            const descriptor = Object.getOwnPropertyDescriptor(proto, prop);
            if (typeof descriptor?.value === 'function') {
                mock[prop] = jest.fn();
            }
        }
        mockFunctions(Object.getPrototypeOf(proto));
    }
    mockFunctions(type.prototype);
    return mock;
}
export function createMockWithValues(type, values) {
    const mock = createMock(type);
    Object.entries(values).forEach(([field, value]) => {
        mock[field] = value;
    });
    return mock;
}
export function provideMock(type) {
    return {
        provide: type,
        useValue: createMock(type),
    };
}
export function provideMockWithValues(type, values) {
    return {
        provide: type,
        useValue: createMockWithValues(type, values),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLW1vY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9qZXN0LXV0aWxzL3NyYy9saWIvY3JlYXRlLW1vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxVQUFVLFVBQVUsQ0FBSSxJQUFhO0lBQ3pDLE1BQU0sSUFBSSxHQUFRLEVBQUUsQ0FBQztJQUVyQixTQUFTLGFBQWEsQ0FBQyxLQUFVO1FBQy9CLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixPQUFPO1NBQ1I7UUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwRCxJQUFJLElBQUksS0FBSyxhQUFhLEVBQUU7Z0JBQzFCLFNBQVM7YUFDVjtZQUVELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEUsSUFBSSxPQUFPLFVBQVUsRUFBRSxLQUFLLEtBQUssVUFBVSxFQUFFO2dCQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO2FBQ3hCO1NBQ0Y7UUFFRCxhQUFhLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTlCLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBdUIsSUFBYSxFQUFFLE1BQWdDO0lBQ3hHLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU5QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDL0MsSUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUksSUFBYTtJQUMxQyxPQUFPO1FBQ0wsT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQztLQUMzQixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBdUIsSUFBYSxFQUFFLE1BQWdDO0lBQ3pHLE9BQU87UUFDTCxPQUFPLEVBQUUsSUFBSTtRQUNiLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IHR5cGUgTW9jazxUPiA9IFQgJiB7IFtLIGluIGtleW9mIFRdOiBUW0tdICYgamVzdC5Nb2NrIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrPFQ+KHR5cGU6IFR5cGU8VD4pOiBNb2NrPFQ+IHtcbiAgY29uc3QgbW9jazogYW55ID0ge307XG5cbiAgZnVuY3Rpb24gbW9ja0Z1bmN0aW9ucyhwcm90bzogYW55KSB7XG4gICAgaWYgKCFwcm90bykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90bykpIHtcbiAgICAgIGlmIChwcm9wID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90bywgcHJvcCk7XG4gICAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3I/LnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG1vY2tbcHJvcF0gPSBqZXN0LmZuKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbW9ja0Z1bmN0aW9ucyhPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pKTtcbiAgfVxuXG4gIG1vY2tGdW5jdGlvbnModHlwZS5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBtb2NrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9ja1dpdGhWYWx1ZXM8VCwgSyBleHRlbmRzIGtleW9mIFQ+KHR5cGU6IFR5cGU8VD4sIHZhbHVlczogUGFydGlhbDxSZWNvcmQ8SywgVFtLXT4+KTogTW9jazxUPiB7XG4gIGNvbnN0IG1vY2sgPSBjcmVhdGVNb2NrKHR5cGUpO1xuXG4gIE9iamVjdC5lbnRyaWVzKHZhbHVlcykuZm9yRWFjaCgoW2ZpZWxkLCB2YWx1ZV0pID0+IHtcbiAgICAobW9jayBhcyBhbnkpW2ZpZWxkXSA9IHZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gbW9jaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVNb2NrPFQ+KHR5cGU6IFR5cGU8VD4pOiBQcm92aWRlciB7XG4gIHJldHVybiB7XG4gICAgcHJvdmlkZTogdHlwZSxcbiAgICB1c2VWYWx1ZTogY3JlYXRlTW9jayh0eXBlKSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVNb2NrV2l0aFZhbHVlczxULCBLIGV4dGVuZHMga2V5b2YgVD4odHlwZTogVHlwZTxUPiwgdmFsdWVzOiBQYXJ0aWFsPFJlY29yZDxLLCBUW0tdPj4pOiBQcm92aWRlciB7XG4gIHJldHVybiB7XG4gICAgcHJvdmlkZTogdHlwZSxcbiAgICB1c2VWYWx1ZTogY3JlYXRlTW9ja1dpdGhWYWx1ZXModHlwZSwgdmFsdWVzKSxcbiAgfTtcbn1cbiJdfQ==