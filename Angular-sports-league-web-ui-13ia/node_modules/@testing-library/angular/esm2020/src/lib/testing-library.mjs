import { ChangeDetectorRef, Component, NgZone, SimpleChange, ApplicationInitStatus, } from '@angular/core';
import { TestBed, tick } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';
import { Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { getQueriesForElement as dtlGetQueriesForElement, prettyDOM as dtlPrettyDOM, waitFor as dtlWaitFor, waitForElementToBeRemoved as dtlWaitForElementToBeRemoved, screen as dtlScreen, within as dtlWithin, configure as dtlConfigure, } from '@testing-library/dom';
import { getConfig } from './config';
import * as i0 from "@angular/core";
const mountedFixtures = new Set();
const inject = TestBed.inject || TestBed.get;
export async function render(sut, renderOptions = {}) {
    const { dom: domConfig, ...globalConfig } = getConfig();
    const { detectChanges: detectChangesOnRender = true, declarations = [], imports = [], providers = [], schemas = [], queries, wrapper = WrapperComponent, componentProperties = {}, componentProviders = [], excludeComponentDeclaration = false, routes = [], removeAngularAttributes = false, defaultImports = [], } = { ...globalConfig, ...renderOptions };
    dtlConfigure({
        eventWrapper: (cb) => {
            const result = cb();
            detectChangesForMountedFixtures();
            return result;
        },
        ...domConfig,
    });
    TestBed.configureTestingModule({
        declarations: addAutoDeclarations(sut, {
            declarations,
            excludeComponentDeclaration,
            wrapper,
        }),
        imports: addAutoImports({
            imports: imports.concat(defaultImports),
            routes,
        }),
        providers: [...providers],
        schemas: [...schemas],
    });
    await TestBed.compileComponents();
    componentProviders
        .reduce((acc, provider) => acc.concat(provider), [])
        .forEach((p) => {
        const { provide, ...provider } = p;
        TestBed.overrideProvider(provide, provider);
    });
    const componentContainer = createComponentFixture(sut, wrapper);
    let fixture;
    let detectChanges;
    await renderFixture(componentProperties);
    const rerender = async (rerenderedProperties) => {
        await renderFixture(rerenderedProperties);
    };
    const change = (changedProperties) => {
        const changes = getChangesObj(fixture.componentInstance, changedProperties);
        setComponentProperties(fixture, { componentProperties: changedProperties });
        if (hasOnChangesHook(fixture.componentInstance)) {
            fixture.componentInstance.ngOnChanges(changes);
        }
        fixture.componentRef.injector.get(ChangeDetectorRef).detectChanges();
    };
    const zone = inject(NgZone);
    const router = inject(Router);
    if (typeof router?.initialNavigation === 'function') {
        router?.initialNavigation();
    }
    const navigate = async (elementOrPath, basePath = '') => {
        const href = typeof elementOrPath === 'string' ? elementOrPath : elementOrPath.getAttribute('href');
        const [path, params] = (basePath + href).split('?');
        const queryParams = params
            ? params.split('&').reduce((qp, q) => {
                const [key, value] = q.split('=');
                const currentValue = qp[key];
                if (typeof currentValue === 'undefined') {
                    qp[key] = value;
                }
                else if (Array.isArray(currentValue)) {
                    qp[key] = [...currentValue, value];
                }
                else {
                    qp[key] = [currentValue, value];
                }
                return qp;
            }, {})
            : undefined;
        const navigateOptions = queryParams
            ? {
                queryParams,
            }
            : undefined;
        const doNavigate = () => {
            return navigateOptions ? router?.navigate([path], navigateOptions) : router?.navigate([path]);
        };
        let result;
        if (zone) {
            await zone.run(() => (result = doNavigate()));
        }
        else {
            result = doNavigate();
        }
        detectChanges();
        return result ?? false;
    };
    return {
        // @ts-ignore: fixture assigned
        fixture,
        detectChanges: () => detectChanges(),
        navigate,
        rerender,
        change,
        // @ts-ignore: fixture assigned
        debugElement: typeof sut === 'string' ? fixture.debugElement : fixture.debugElement.query(By.directive(sut)),
        // @ts-ignore: fixture assigned
        container: fixture.nativeElement,
        debug: (element = fixture.nativeElement, maxLength, options) => Array.isArray(element)
            ? element.forEach((e) => console.log(dtlPrettyDOM(e, maxLength, options)))
            : console.log(dtlPrettyDOM(element, maxLength, options)),
        // @ts-ignore: fixture assigned
        ...replaceFindWithFindAndDetectChanges(dtlGetQueriesForElement(fixture.nativeElement, queries)),
    };
    async function renderFixture(properties) {
        if (fixture) {
            cleanupAtFixture(fixture);
        }
        fixture = await createComponent(componentContainer);
        setComponentProperties(fixture, { componentProperties: properties });
        if (removeAngularAttributes) {
            fixture.nativeElement.removeAttribute('ng-version');
            const idAttribute = fixture.nativeElement.getAttribute('id');
            if (idAttribute && idAttribute.startsWith('root')) {
                fixture.nativeElement.removeAttribute('id');
            }
        }
        mountedFixtures.add(fixture);
        let isAlive = true;
        fixture.componentRef.onDestroy(() => (isAlive = false));
        if (hasOnChangesHook(fixture.componentInstance)) {
            const changes = getChangesObj(null, componentProperties);
            fixture.componentInstance.ngOnChanges(changes);
        }
        detectChanges = () => {
            if (isAlive) {
                fixture.detectChanges();
            }
        };
        if (detectChangesOnRender) {
            detectChanges();
        }
    }
}
async function createComponent(component) {
    /* Make sure angular application is initialized before creating component */
    await inject(ApplicationInitStatus).donePromise;
    return TestBed.createComponent(component);
}
function createComponentFixture(sut, wrapper) {
    if (typeof sut === 'string') {
        TestBed.overrideTemplate(wrapper, sut);
        return wrapper;
    }
    return sut;
}
function setComponentProperties(fixture, { componentProperties = {} }) {
    for (const key of Object.keys(componentProperties)) {
        const descriptor = Object.getOwnPropertyDescriptor(fixture.componentInstance.constructor.prototype, key);
        let _value = componentProperties[key];
        const defaultGetter = () => _value;
        const extendedSetter = (value) => {
            _value = value;
            descriptor?.set?.call(fixture.componentInstance, _value);
            fixture.detectChanges();
        };
        Object.defineProperty(fixture.componentInstance, key, {
            get: descriptor?.get || defaultGetter,
            set: extendedSetter,
            // Allow the property to be defined again later.
            // This happens when the component properties are updated after initial render.
            // For Jest this is `true` by default, for Karma and a real browser the default is `false`
            configurable: true,
        });
        descriptor?.set?.call(fixture.componentInstance, _value);
    }
    return fixture;
}
function hasOnChangesHook(componentInstance) {
    return ('ngOnChanges' in componentInstance && typeof componentInstance.ngOnChanges === 'function');
}
function getChangesObj(oldProps, newProps) {
    const isFirstChange = oldProps === null;
    return Object.keys(newProps).reduce((changes, key) => ({
        ...changes,
        [key]: new SimpleChange(isFirstChange ? null : oldProps[key], newProps[key], isFirstChange),
    }), {});
}
function addAutoDeclarations(sut, { declarations = [], excludeComponentDeclaration, wrapper, }) {
    if (typeof sut === 'string') {
        return [...declarations, wrapper];
    }
    const components = () => (excludeComponentDeclaration ? [] : [sut]);
    return [...declarations, ...components()];
}
function addAutoImports({ imports = [], routes }) {
    const animations = () => {
        const animationIsDefined = imports.indexOf(NoopAnimationsModule) > -1 || imports.indexOf(BrowserAnimationsModule) > -1;
        return animationIsDefined ? [] : [NoopAnimationsModule];
    };
    const routing = () => (routes ? [RouterTestingModule.withRoutes(routes)] : []);
    return [...imports, ...animations(), ...routing()];
}
/**
 * Wrap waitFor to invoke the Angular change detection cycle before invoking the callback
 */
async function waitForWrapper(detectChanges, callback, options) {
    let inFakeAsync = true;
    try {
        tick(0);
    }
    catch (err) {
        inFakeAsync = false;
    }
    detectChanges();
    return await dtlWaitFor(() => {
        setTimeout(() => detectChanges(), 0);
        if (inFakeAsync) {
            tick(0);
        }
        return callback();
    }, options);
}
/**
 * Wrap waitForElementToBeRemovedWrapper to poke the Angular change detection cycle before invoking the callback
 */
async function waitForElementToBeRemovedWrapper(detectChanges, callback, options) {
    let cb;
    if (typeof callback !== 'function') {
        const elements = (Array.isArray(callback) ? callback : [callback]);
        const getRemainingElements = elements.map((element) => {
            let parent = element.parentElement;
            while (parent.parentElement) {
                parent = parent.parentElement;
            }
            return () => (parent.contains(element) ? element : null);
        });
        cb = () => getRemainingElements.map((c) => c()).find(Boolean);
    }
    else {
        cb = callback;
    }
    return await dtlWaitForElementToBeRemoved(() => {
        const result = cb();
        detectChanges();
        return result;
    }, options);
}
function cleanup() {
    mountedFixtures.forEach(cleanupAtFixture);
}
function cleanupAtFixture(fixture) {
    fixture.destroy();
    if (!fixture.nativeElement.getAttribute('ng-version') && fixture.nativeElement.parentNode === document.body) {
        document.body.removeChild(fixture.nativeElement);
    }
    mountedFixtures.delete(fixture);
}
// if we're running in a test runner that supports afterEach
// then we'll automatically run cleanup afterEach test
// this ensures that tests run in isolation from each other
// if you don't like this, set the ATL_SKIP_AUTO_CLEANUP env variable to 'true'
if (typeof process === 'undefined' || !process.env?.ATL_SKIP_AUTO_CLEANUP) {
    if (typeof afterEach === 'function') {
        afterEach(() => {
            cleanup();
        });
    }
}
class WrapperComponent {
}
WrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: WrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
WrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.1", type: WrapperComponent, selector: "atl-wrapper-component", ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: WrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'atl-wrapper-component', template: '' }]
        }] });
/**
 * Wrap findBy queries to poke the Angular change detection cycle
 */
function replaceFindWithFindAndDetectChanges(originalQueriesForContainer) {
    return Object.keys(originalQueriesForContainer).reduce((newQueries, key) => {
        const getByQuery = originalQueriesForContainer[key.replace('find', 'get')];
        if (key.startsWith('find') && getByQuery) {
            newQueries[key] = async (...queryOptions) => {
                const waitOptions = queryOptions.length === 3 ? queryOptions.pop() : undefined;
                // original implementation at https://github.com/testing-library/dom-testing-library/blob/main/src/query-helpers.js
                return await waitForWrapper(detectChangesForMountedFixtures, () => getByQuery(...queryOptions), waitOptions);
            };
        }
        else {
            newQueries[key] = originalQueriesForContainer[key];
        }
        return newQueries;
    }, {});
}
/**
 * Call detectChanges for all fixtures
 */
function detectChangesForMountedFixtures() {
    mountedFixtures.forEach((fixture) => {
        try {
            fixture.detectChanges();
        }
        catch (err) {
            if (!err.message.startsWith('ViewDestroyedError')) {
                throw err;
            }
        }
    });
}
/**
 * Re-export screen with patched queries
 */
const screen = replaceFindWithFindAndDetectChanges(dtlScreen);
/**
 * Re-export within with patched queries
 */
const within = (element, queriesToBind) => {
    const container = dtlWithin(element, queriesToBind);
    return replaceFindWithFindAndDetectChanges(container);
};
/**
 * Re-export waitFor with patched waitFor
 */
async function waitFor(callback, options) {
    return waitForWrapper(detectChangesForMountedFixtures, callback, options);
}
/**
 * Re-export waitForElementToBeRemoved with patched waitForElementToBeRemoved
 */
async function waitForElementToBeRemoved(callback, options) {
    return waitForElementToBeRemovedWrapper(detectChangesForMountedFixtures, callback, options);
}
/**
 * Manually export otherwise we get the following error while running Jest tests
 * TypeError: Cannot set property fireEvent of [object Object] which has only a getter
 * exports.fireEvent = fireEvent
 */
export { fireEvent, buildQueries, getByLabelText, getAllByLabelText, queryByLabelText, queryAllByLabelText, findByLabelText, findAllByLabelText, getByPlaceholderText, getAllByPlaceholderText, queryByPlaceholderText, queryAllByPlaceholderText, findByPlaceholderText, findAllByPlaceholderText, getByText, getAllByText, queryByText, queryAllByText, findByText, findAllByText, getByAltText, getAllByAltText, queryByAltText, queryAllByAltText, findByAltText, findAllByAltText, getByTitle, getAllByTitle, queryByTitle, queryAllByTitle, findByTitle, findAllByTitle, getByDisplayValue, getAllByDisplayValue, queryByDisplayValue, queryAllByDisplayValue, findByDisplayValue, findAllByDisplayValue, getByRole, getAllByRole, queryByRole, queryAllByRole, findByRole, findAllByRole, getByTestId, getAllByTestId, queryByTestId, queryAllByTestId, findByTestId, findAllByTestId, createEvent, getDefaultNormalizer, getElementError, getNodeText, getQueriesForElement, getRoles, isInaccessible, logDOM, logRoles, prettyDOM, queries, queryAllByAttribute, queryByAttribute, queryHelpers, } from '@testing-library/dom';
// export patched dtl
export { screen, waitFor, waitForElementToBeRemoved, within };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy1saWJyYXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGVzdGluZy1saWJyYXJ5L3NyYy9saWIvdGVzdGluZy1saWJyYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsU0FBUyxFQUVULE1BQU0sRUFDTixZQUFZLEVBR1oscUJBQXFCLEdBQ3RCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBb0IsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNyRyxPQUFPLEVBQW9CLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFDTCxvQkFBb0IsSUFBSSx1QkFBdUIsRUFDL0MsU0FBUyxJQUFJLFlBQVksRUFDekIsT0FBTyxJQUFJLFVBQVUsRUFDckIseUJBQXlCLElBQUksNEJBQTRCLEVBQ3pELE1BQU0sSUFBSSxTQUFTLEVBQ25CLE1BQU0sSUFBSSxTQUFTLEVBRW5CLFNBQVMsSUFBSSxZQUFZLEdBRTFCLE1BQU0sc0JBQXNCLENBQUM7QUFHOUIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7QUFFckMsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLEVBQXlCLENBQUM7QUFDekQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDO0FBVzdDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsTUFBTSxDQUMxQixHQUEyQixFQUMzQixnQkFBc0YsRUFBRTtJQUV4RixNQUFNLEVB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LEVBQ1IsU0FBUyxFQUNULE9BQU8sRUFDUCxtQkFBbUIsRUFDbkIsZ0JBQWdCLEVBQ2hCLFlBQVksR0FDYixNQUFNLHNCQUFzQixDQUFDO0FBRTlCLHFCQUFxQjtBQUNyQixPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIFR5cGUsXG4gIE5nWm9uZSxcbiAgU2ltcGxlQ2hhbmdlLFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIEFwcGxpY2F0aW9uSW5pdFN0YXR1cyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCB0aWNrIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEJ5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBCcm93c2VyQW5pbWF0aW9uc01vZHVsZSwgTm9vcEFuaW1hdGlvbnNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkV4dHJhcywgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFJvdXRlclRlc3RpbmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXIvdGVzdGluZyc7XG5pbXBvcnQge1xuICBnZXRRdWVyaWVzRm9yRWxlbWVudCBhcyBkdGxHZXRRdWVyaWVzRm9yRWxlbWVudCxcbiAgcHJldHR5RE9NIGFzIGR0bFByZXR0eURPTSxcbiAgd2FpdEZvciBhcyBkdGxXYWl0Rm9yLFxuICB3YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkIGFzIGR0bFdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQsXG4gIHNjcmVlbiBhcyBkdGxTY3JlZW4sXG4gIHdpdGhpbiBhcyBkdGxXaXRoaW4sXG4gIHdhaXRGb3JPcHRpb25zIGFzIGR0bFdhaXRGb3JPcHRpb25zLFxuICBjb25maWd1cmUgYXMgZHRsQ29uZmlndXJlLFxuICBxdWVyaWVzIGFzIGR0bFF1ZXJpZXMsXG59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvZG9tJztcbmltcG9ydCB0eXBlIHsgUXVlcmllcywgQm91bmRGdW5jdGlvbnMgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L2RvbSc7XG5pbXBvcnQgeyBSZW5kZXJDb21wb25lbnRPcHRpb25zLCBSZW5kZXJUZW1wbGF0ZU9wdGlvbnMsIFJlbmRlclJlc3VsdCB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcblxuY29uc3QgbW91bnRlZEZpeHR1cmVzID0gbmV3IFNldDxDb21wb25lbnRGaXh0dXJlPGFueT4+KCk7XG5jb25zdCBpbmplY3QgPSBUZXN0QmVkLmluamVjdCB8fCBUZXN0QmVkLmdldDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbmRlcjxDb21wb25lbnRUeXBlPihcbiAgY29tcG9uZW50OiBUeXBlPENvbXBvbmVudFR5cGU+LFxuICByZW5kZXJPcHRpb25zPzogUmVuZGVyQ29tcG9uZW50T3B0aW9uczxDb21wb25lbnRUeXBlPixcbik6IFByb21pc2U8UmVuZGVyUmVzdWx0PENvbXBvbmVudFR5cGUsIENvbXBvbmVudFR5cGU+PjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXI8V3JhcHBlclR5cGUgPSBXcmFwcGVyQ29tcG9uZW50PihcbiAgdGVtcGxhdGU6IHN0cmluZyxcbiAgcmVuZGVyT3B0aW9ucz86IFJlbmRlclRlbXBsYXRlT3B0aW9uczxXcmFwcGVyVHlwZT4sXG4pOiBQcm9taXNlPFJlbmRlclJlc3VsdDxXcmFwcGVyVHlwZT4+O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVuZGVyPFN1dFR5cGUsIFdyYXBwZXJUeXBlID0gU3V0VHlwZT4oXG4gIHN1dDogVHlwZTxTdXRUeXBlPiB8IHN0cmluZyxcbiAgcmVuZGVyT3B0aW9uczogUmVuZGVyQ29tcG9uZW50T3B0aW9uczxTdXRUeXBlPiB8IFJlbmRlclRlbXBsYXRlT3B0aW9uczxXcmFwcGVyVHlwZT4gPSB7fSxcbik6IFByb21pc2U8UmVuZGVyUmVzdWx0PFN1dFR5cGU+PiB7XG4gIGNvbnN0IHsgZG9tOiBkb21Db25maWcsIC4uLmdsb2JhbENvbmZpZyB9ID0gZ2V0Q29uZmlnKCk7XG4gIGNvbnN0IHtcbiAgICBkZXRlY3RDaGFuZ2VzOiBkZXRlY3RDaGFuZ2VzT25SZW5kZXIgPSB0cnVlLFxuICAgIGRlY2xhcmF0aW9ucyA9IFtdLFxuICAgIGltcG9ydHMgPSBbXSxcbiAgICBwcm92aWRlcnMgPSBbXSxcbiAgICBzY2hlbWFzID0gW10sXG4gICAgcXVlcmllcyxcbiAgICB3cmFwcGVyID0gV3JhcHBlckNvbXBvbmVudCBhcyBUeXBlPFdyYXBwZXJUeXBlPixcbiAgICBjb21wb25lbnRQcm9wZXJ0aWVzID0ge30sXG4gICAgY29tcG9uZW50UHJvdmlkZXJzID0gW10sXG4gICAgZXhjbHVkZUNvbXBvbmVudERlY2xhcmF0aW9uID0gZmFsc2UsXG4gICAgcm91dGVzID0gW10sXG4gICAgcmVtb3ZlQW5ndWxhckF0dHJpYnV0ZXMgPSBmYWxzZSxcbiAgICBkZWZhdWx0SW1wb3J0cyA9IFtdLFxuICB9ID0geyAuLi5nbG9iYWxDb25maWcsIC4uLnJlbmRlck9wdGlvbnMgfTtcblxuICBkdGxDb25maWd1cmUoe1xuICAgIGV2ZW50V3JhcHBlcjogKGNiKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBjYigpO1xuICAgICAgZGV0ZWN0Q2hhbmdlc0Zvck1vdW50ZWRGaXh0dXJlcygpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIC4uLmRvbUNvbmZpZyxcbiAgfSk7XG5cbiAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IGFkZEF1dG9EZWNsYXJhdGlvbnMoc3V0LCB7XG4gICAgICBkZWNsYXJhdGlvbnMsXG4gICAgICBleGNsdWRlQ29tcG9uZW50RGVjbGFyYXRpb24sXG4gICAgICB3cmFwcGVyLFxuICAgIH0pLFxuICAgIGltcG9ydHM6IGFkZEF1dG9JbXBvcnRzKHtcbiAgICAgIGltcG9ydHM6IGltcG9ydHMuY29uY2F0KGRlZmF1bHRJbXBvcnRzKSxcbiAgICAgIHJvdXRlcyxcbiAgICB9KSxcbiAgICBwcm92aWRlcnM6IFsuLi5wcm92aWRlcnNdLFxuICAgIHNjaGVtYXM6IFsuLi5zY2hlbWFzXSxcbiAgfSk7XG5cbiAgYXdhaXQgVGVzdEJlZC5jb21waWxlQ29tcG9uZW50cygpO1xuXG4gIGNvbXBvbmVudFByb3ZpZGVyc1xuICAgIC5yZWR1Y2UoKGFjYywgcHJvdmlkZXIpID0+IGFjYy5jb25jYXQocHJvdmlkZXIpLCBbXSBhcyBhbnlbXSlcbiAgICAuZm9yRWFjaCgocDogYW55KSA9PiB7XG4gICAgICBjb25zdCB7IHByb3ZpZGUsIC4uLnByb3ZpZGVyIH0gPSBwO1xuICAgICAgVGVzdEJlZC5vdmVycmlkZVByb3ZpZGVyKHByb3ZpZGUsIHByb3ZpZGVyKTtcbiAgICB9KTtcblxuICBjb25zdCBjb21wb25lbnRDb250YWluZXIgPSBjcmVhdGVDb21wb25lbnRGaXh0dXJlKHN1dCwgd3JhcHBlcik7XG5cbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8U3V0VHlwZT47XG4gIGxldCBkZXRlY3RDaGFuZ2VzOiAoKSA9PiB2b2lkO1xuXG4gIGF3YWl0IHJlbmRlckZpeHR1cmUoY29tcG9uZW50UHJvcGVydGllcyk7XG5cbiAgY29uc3QgcmVyZW5kZXIgPSBhc3luYyAocmVyZW5kZXJlZFByb3BlcnRpZXM6IFBhcnRpYWw8U3V0VHlwZT4pID0+IHtcbiAgICBhd2FpdCByZW5kZXJGaXh0dXJlKHJlcmVuZGVyZWRQcm9wZXJ0aWVzKTtcbiAgfTtcblxuICBjb25zdCBjaGFuZ2UgPSAoY2hhbmdlZFByb3BlcnRpZXM6IFBhcnRpYWw8U3V0VHlwZT4pID0+IHtcbiAgICBjb25zdCBjaGFuZ2VzID0gZ2V0Q2hhbmdlc09iaihmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlLCBjaGFuZ2VkUHJvcGVydGllcyk7XG5cbiAgICBzZXRDb21wb25lbnRQcm9wZXJ0aWVzKGZpeHR1cmUsIHsgY29tcG9uZW50UHJvcGVydGllczogY2hhbmdlZFByb3BlcnRpZXMgfSk7XG5cbiAgICBpZiAoaGFzT25DaGFuZ2VzSG9vayhmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZS5uZ09uQ2hhbmdlcyhjaGFuZ2VzKTtcbiAgICB9XG5cbiAgICBmaXh0dXJlLmNvbXBvbmVudFJlZi5pbmplY3Rvci5nZXQoQ2hhbmdlRGV0ZWN0b3JSZWYpLmRldGVjdENoYW5nZXMoKTtcbiAgfTtcblxuICBjb25zdCB6b25lID0gaW5qZWN0KE5nWm9uZSk7XG5cbiAgY29uc3Qgcm91dGVyID0gaW5qZWN0KFJvdXRlcik7XG4gIGlmICh0eXBlb2Ygcm91dGVyPy5pbml0aWFsTmF2aWdhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJvdXRlcj8uaW5pdGlhbE5hdmlnYXRpb24oKTtcbiAgfVxuXG4gIGNvbnN0IG5hdmlnYXRlID0gYXN5bmMgKGVsZW1lbnRPclBhdGg6IEVsZW1lbnQgfCBzdHJpbmcsIGJhc2VQYXRoID0gJycpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBocmVmID0gdHlwZW9mIGVsZW1lbnRPclBhdGggPT09ICdzdHJpbmcnID8gZWxlbWVudE9yUGF0aCA6IGVsZW1lbnRPclBhdGguZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgY29uc3QgW3BhdGgsIHBhcmFtc10gPSAoYmFzZVBhdGggKyBocmVmKS5zcGxpdCgnPycpO1xuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gcGFyYW1zXG4gICAgICA/IHBhcmFtcy5zcGxpdCgnJicpLnJlZHVjZSgocXAsIHEpID0+IHtcbiAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBxLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gcXBba2V5XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHFwW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudFZhbHVlKSkge1xuICAgICAgICAgICAgcXBba2V5XSA9IFsuLi5jdXJyZW50VmFsdWUsIHZhbHVlXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcXBba2V5XSA9IFtjdXJyZW50VmFsdWUsIHZhbHVlXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHFwO1xuICAgICAgICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBzdHJpbmdbXT4pXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IG5hdmlnYXRlT3B0aW9uczogTmF2aWdhdGlvbkV4dHJhcyB8IHVuZGVmaW5lZCA9IHF1ZXJ5UGFyYW1zXG4gICAgICA/IHtcbiAgICAgICAgICBxdWVyeVBhcmFtcyxcbiAgICAgICAgfVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCBkb05hdmlnYXRlID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIG5hdmlnYXRlT3B0aW9ucyA/IHJvdXRlcj8ubmF2aWdhdGUoW3BhdGhdLCBuYXZpZ2F0ZU9wdGlvbnMpIDogcm91dGVyPy5uYXZpZ2F0ZShbcGF0aF0pO1xuICAgIH07XG5cbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgaWYgKHpvbmUpIHtcbiAgICAgIGF3YWl0IHpvbmUucnVuKCgpID0+IChyZXN1bHQgPSBkb05hdmlnYXRlKCkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gZG9OYXZpZ2F0ZSgpO1xuICAgIH1cblxuICAgIGRldGVjdENoYW5nZXMoKTtcbiAgICByZXR1cm4gcmVzdWx0ID8/IGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgLy8gQHRzLWlnbm9yZTogZml4dHVyZSBhc3NpZ25lZFxuICAgIGZpeHR1cmUsXG4gICAgZGV0ZWN0Q2hhbmdlczogKCkgPT4gZGV0ZWN0Q2hhbmdlcygpLFxuICAgIG5hdmlnYXRlLFxuICAgIHJlcmVuZGVyLFxuICAgIGNoYW5nZSxcbiAgICAvLyBAdHMtaWdub3JlOiBmaXh0dXJlIGFzc2lnbmVkXG4gICAgZGVidWdFbGVtZW50OiB0eXBlb2Ygc3V0ID09PSAnc3RyaW5nJyA/IGZpeHR1cmUuZGVidWdFbGVtZW50IDogZml4dHVyZS5kZWJ1Z0VsZW1lbnQucXVlcnkoQnkuZGlyZWN0aXZlKHN1dCkpLFxuICAgIC8vIEB0cy1pZ25vcmU6IGZpeHR1cmUgYXNzaWduZWRcbiAgICBjb250YWluZXI6IGZpeHR1cmUubmF0aXZlRWxlbWVudCxcbiAgICBkZWJ1ZzogKGVsZW1lbnQgPSBmaXh0dXJlLm5hdGl2ZUVsZW1lbnQsIG1heExlbmd0aCwgb3B0aW9ucykgPT5cbiAgICAgIEFycmF5LmlzQXJyYXkoZWxlbWVudClcbiAgICAgICAgPyBlbGVtZW50LmZvckVhY2goKGUpID0+IGNvbnNvbGUubG9nKGR0bFByZXR0eURPTShlLCBtYXhMZW5ndGgsIG9wdGlvbnMpKSlcbiAgICAgICAgOiBjb25zb2xlLmxvZyhkdGxQcmV0dHlET00oZWxlbWVudCwgbWF4TGVuZ3RoLCBvcHRpb25zKSksXG4gICAgLy8gQHRzLWlnbm9yZTogZml4dHVyZSBhc3NpZ25lZFxuICAgIC4uLnJlcGxhY2VGaW5kV2l0aEZpbmRBbmREZXRlY3RDaGFuZ2VzKGR0bEdldFF1ZXJpZXNGb3JFbGVtZW50KGZpeHR1cmUubmF0aXZlRWxlbWVudCwgcXVlcmllcykpLFxuICB9O1xuXG4gIGFzeW5jIGZ1bmN0aW9uIHJlbmRlckZpeHR1cmUocHJvcGVydGllczogUGFydGlhbDxTdXRUeXBlPikge1xuICAgIGlmIChmaXh0dXJlKSB7XG4gICAgICBjbGVhbnVwQXRGaXh0dXJlKGZpeHR1cmUpO1xuICAgIH1cblxuICAgIGZpeHR1cmUgPSBhd2FpdCBjcmVhdGVDb21wb25lbnQoY29tcG9uZW50Q29udGFpbmVyKTtcbiAgICBzZXRDb21wb25lbnRQcm9wZXJ0aWVzKGZpeHR1cmUsIHsgY29tcG9uZW50UHJvcGVydGllczogcHJvcGVydGllcyB9KTtcblxuICAgIGlmIChyZW1vdmVBbmd1bGFyQXR0cmlidXRlcykge1xuICAgICAgZml4dHVyZS5uYXRpdmVFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnbmctdmVyc2lvbicpO1xuICAgICAgY29uc3QgaWRBdHRyaWJ1dGUgPSBmaXh0dXJlLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgaWYgKGlkQXR0cmlidXRlICYmIGlkQXR0cmlidXRlLnN0YXJ0c1dpdGgoJ3Jvb3QnKSkge1xuICAgICAgICBmaXh0dXJlLm5hdGl2ZUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xuICAgICAgfVxuICAgIH1cbiAgICBtb3VudGVkRml4dHVyZXMuYWRkKGZpeHR1cmUpO1xuXG4gICAgbGV0IGlzQWxpdmUgPSB0cnVlO1xuICAgIGZpeHR1cmUuY29tcG9uZW50UmVmLm9uRGVzdHJveSgoKSA9PiAoaXNBbGl2ZSA9IGZhbHNlKSk7XG5cbiAgICBpZiAoaGFzT25DaGFuZ2VzSG9vayhmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgY29uc3QgY2hhbmdlcyA9IGdldENoYW5nZXNPYmoobnVsbCwgY29tcG9uZW50UHJvcGVydGllcyk7XG4gICAgICBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xuICAgIH1cblxuICAgIGRldGVjdENoYW5nZXMgPSAoKSA9PiB7XG4gICAgICBpZiAoaXNBbGl2ZSkge1xuICAgICAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGRldGVjdENoYW5nZXNPblJlbmRlcikge1xuICAgICAgZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQ8U3V0VHlwZT4oY29tcG9uZW50OiBUeXBlPFN1dFR5cGU+KTogUHJvbWlzZTxDb21wb25lbnRGaXh0dXJlPFN1dFR5cGU+PiB7XG4gIC8qIE1ha2Ugc3VyZSBhbmd1bGFyIGFwcGxpY2F0aW9uIGlzIGluaXRpYWxpemVkIGJlZm9yZSBjcmVhdGluZyBjb21wb25lbnQgKi9cbiAgYXdhaXQgaW5qZWN0KEFwcGxpY2F0aW9uSW5pdFN0YXR1cykuZG9uZVByb21pc2U7XG4gIHJldHVybiBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRGaXh0dXJlPFN1dFR5cGUsIFdyYXBwZXJUeXBlPihcbiAgc3V0OiBUeXBlPFN1dFR5cGU+IHwgc3RyaW5nLFxuICB3cmFwcGVyOiBUeXBlPFdyYXBwZXJUeXBlPixcbik6IFR5cGU8YW55PiB7XG4gIGlmICh0eXBlb2Ygc3V0ID09PSAnc3RyaW5nJykge1xuICAgIFRlc3RCZWQub3ZlcnJpZGVUZW1wbGF0ZSh3cmFwcGVyLCBzdXQpO1xuICAgIHJldHVybiB3cmFwcGVyO1xuICB9XG4gIHJldHVybiBzdXQ7XG59XG5cbmZ1bmN0aW9uIHNldENvbXBvbmVudFByb3BlcnRpZXM8U3V0VHlwZT4oXG4gIGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8U3V0VHlwZT4sXG4gIHsgY29tcG9uZW50UHJvcGVydGllcyA9IHt9IH06IFBpY2s8UmVuZGVyVGVtcGxhdGVPcHRpb25zPFN1dFR5cGUsIGFueT4sICdjb21wb25lbnRQcm9wZXJ0aWVzJz4sXG4pIHtcbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY29tcG9uZW50UHJvcGVydGllcykpIHtcbiAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcigoZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZSBhcyBhbnkpLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwga2V5KTtcbiAgICBsZXQgX3ZhbHVlID0gY29tcG9uZW50UHJvcGVydGllc1trZXldO1xuICAgIGNvbnN0IGRlZmF1bHRHZXR0ZXIgPSAoKSA9PiBfdmFsdWU7XG4gICAgY29uc3QgZXh0ZW5kZWRTZXR0ZXIgPSAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgX3ZhbHVlID0gdmFsdWU7XG4gICAgICBkZXNjcmlwdG9yPy5zZXQ/LmNhbGwoZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZSwgX3ZhbHVlKTtcbiAgICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZSwga2V5LCB7XG4gICAgICBnZXQ6IGRlc2NyaXB0b3I/LmdldCB8fCBkZWZhdWx0R2V0dGVyLFxuICAgICAgc2V0OiBleHRlbmRlZFNldHRlcixcbiAgICAgIC8vIEFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZSBkZWZpbmVkIGFnYWluIGxhdGVyLlxuICAgICAgLy8gVGhpcyBoYXBwZW5zIHdoZW4gdGhlIGNvbXBvbmVudCBwcm9wZXJ0aWVzIGFyZSB1cGRhdGVkIGFmdGVyIGluaXRpYWwgcmVuZGVyLlxuICAgICAgLy8gRm9yIEplc3QgdGhpcyBpcyBgdHJ1ZWAgYnkgZGVmYXVsdCwgZm9yIEthcm1hIGFuZCBhIHJlYWwgYnJvd3NlciB0aGUgZGVmYXVsdCBpcyBgZmFsc2VgXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSk7XG5cbiAgICBkZXNjcmlwdG9yPy5zZXQ/LmNhbGwoZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZSwgX3ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZml4dHVyZTtcbn1cblxuZnVuY3Rpb24gaGFzT25DaGFuZ2VzSG9vazxTdXRUeXBlPihjb21wb25lbnRJbnN0YW5jZTogU3V0VHlwZSk6IGNvbXBvbmVudEluc3RhbmNlIGlzIFN1dFR5cGUgJiBPbkNoYW5nZXMge1xuICByZXR1cm4gKFxuICAgICduZ09uQ2hhbmdlcycgaW4gY29tcG9uZW50SW5zdGFuY2UgJiYgdHlwZW9mIChjb21wb25lbnRJbnN0YW5jZSBhcyBTdXRUeXBlICYgT25DaGFuZ2VzKS5uZ09uQ2hhbmdlcyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufVxuXG5mdW5jdGlvbiBnZXRDaGFuZ2VzT2JqPFN1dFR5cGUgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihcbiAgb2xkUHJvcHM6IFBhcnRpYWw8U3V0VHlwZT4gfCBudWxsLFxuICBuZXdQcm9wczogUGFydGlhbDxTdXRUeXBlPixcbikge1xuICBjb25zdCBpc0ZpcnN0Q2hhbmdlID0gb2xkUHJvcHMgPT09IG51bGw7XG4gIHJldHVybiBPYmplY3Qua2V5cyhuZXdQcm9wcykucmVkdWNlPFNpbXBsZUNoYW5nZXM+KFxuICAgIChjaGFuZ2VzLCBrZXkpID0+ICh7XG4gICAgICAuLi5jaGFuZ2VzLFxuICAgICAgW2tleV06IG5ldyBTaW1wbGVDaGFuZ2UoaXNGaXJzdENoYW5nZSA/IG51bGwgOiBvbGRQcm9wc1trZXldLCBuZXdQcm9wc1trZXldLCBpc0ZpcnN0Q2hhbmdlKSxcbiAgICB9KSxcbiAgICB7fSBhcyBTdXRUeXBlLFxuICApO1xufVxuXG5mdW5jdGlvbiBhZGRBdXRvRGVjbGFyYXRpb25zPFN1dFR5cGU+KFxuICBzdXQ6IFR5cGU8U3V0VHlwZT4gfCBzdHJpbmcsXG4gIHtcbiAgICBkZWNsYXJhdGlvbnMgPSBbXSxcbiAgICBleGNsdWRlQ29tcG9uZW50RGVjbGFyYXRpb24sXG4gICAgd3JhcHBlcixcbiAgfTogUGljazxSZW5kZXJUZW1wbGF0ZU9wdGlvbnM8YW55PiwgJ2RlY2xhcmF0aW9ucycgfCAnZXhjbHVkZUNvbXBvbmVudERlY2xhcmF0aW9uJyB8ICd3cmFwcGVyJz4sXG4pIHtcbiAgaWYgKHR5cGVvZiBzdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIFsuLi5kZWNsYXJhdGlvbnMsIHdyYXBwZXJdO1xuICB9XG5cbiAgY29uc3QgY29tcG9uZW50cyA9ICgpID0+IChleGNsdWRlQ29tcG9uZW50RGVjbGFyYXRpb24gPyBbXSA6IFtzdXRdKTtcbiAgcmV0dXJuIFsuLi5kZWNsYXJhdGlvbnMsIC4uLmNvbXBvbmVudHMoKV07XG59XG5cbmZ1bmN0aW9uIGFkZEF1dG9JbXBvcnRzKHsgaW1wb3J0cyA9IFtdLCByb3V0ZXMgfTogUGljazxSZW5kZXJDb21wb25lbnRPcHRpb25zPGFueT4sICdpbXBvcnRzJyB8ICdyb3V0ZXMnPikge1xuICBjb25zdCBhbmltYXRpb25zID0gKCkgPT4ge1xuICAgIGNvbnN0IGFuaW1hdGlvbklzRGVmaW5lZCA9XG4gICAgICBpbXBvcnRzLmluZGV4T2YoTm9vcEFuaW1hdGlvbnNNb2R1bGUpID4gLTEgfHwgaW1wb3J0cy5pbmRleE9mKEJyb3dzZXJBbmltYXRpb25zTW9kdWxlKSA+IC0xO1xuICAgIHJldHVybiBhbmltYXRpb25Jc0RlZmluZWQgPyBbXSA6IFtOb29wQW5pbWF0aW9uc01vZHVsZV07XG4gIH07XG5cbiAgY29uc3Qgcm91dGluZyA9ICgpID0+IChyb3V0ZXMgPyBbUm91dGVyVGVzdGluZ01vZHVsZS53aXRoUm91dGVzKHJvdXRlcyldIDogW10pO1xuXG4gIHJldHVybiBbLi4uaW1wb3J0cywgLi4uYW5pbWF0aW9ucygpLCAuLi5yb3V0aW5nKCldO1xufVxuXG4vKipcbiAqIFdyYXAgd2FpdEZvciB0byBpbnZva2UgdGhlIEFuZ3VsYXIgY2hhbmdlIGRldGVjdGlvbiBjeWNsZSBiZWZvcmUgaW52b2tpbmcgdGhlIGNhbGxiYWNrXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JXcmFwcGVyPFQ+KFxuICBkZXRlY3RDaGFuZ2VzOiAoKSA9PiB2b2lkLFxuICBjYWxsYmFjazogKCkgPT4gVCBleHRlbmRzIFByb21pc2U8YW55PiA/IG5ldmVyIDogVCxcbiAgb3B0aW9ucz86IGR0bFdhaXRGb3JPcHRpb25zLFxuKTogUHJvbWlzZTxUPiB7XG4gIGxldCBpbkZha2VBc3luYyA9IHRydWU7XG4gIHRyeSB7XG4gICAgdGljaygwKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaW5GYWtlQXN5bmMgPSBmYWxzZTtcbiAgfVxuXG4gIGRldGVjdENoYW5nZXMoKTtcblxuICByZXR1cm4gYXdhaXQgZHRsV2FpdEZvcigoKSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiBkZXRlY3RDaGFuZ2VzKCksIDApO1xuICAgIGlmIChpbkZha2VBc3luYykge1xuICAgICAgdGljaygwKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH0sIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIFdyYXAgd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZFdyYXBwZXIgdG8gcG9rZSB0aGUgQW5ndWxhciBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlIGJlZm9yZSBpbnZva2luZyB0aGUgY2FsbGJhY2tcbiAqL1xuYXN5bmMgZnVuY3Rpb24gd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZFdyYXBwZXI8VD4oXG4gIGRldGVjdENoYW5nZXM6ICgpID0+IHZvaWQsXG4gIGNhbGxiYWNrOiAoKCkgPT4gVCkgfCBULFxuICBvcHRpb25zPzogZHRsV2FpdEZvck9wdGlvbnMsXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgbGV0IGNiOiAoKSA9PiBUO1xuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSAoQXJyYXkuaXNBcnJheShjYWxsYmFjaykgPyBjYWxsYmFjayA6IFtjYWxsYmFja10pIGFzIEVsZW1lbnRbXTtcbiAgICBjb25zdCBnZXRSZW1haW5pbmdFbGVtZW50cyA9IGVsZW1lbnRzLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgbGV0IHBhcmVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudCBhcyBFbGVtZW50O1xuICAgICAgd2hpbGUgKHBhcmVudC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICgpID0+IChwYXJlbnQuY29udGFpbnMoZWxlbWVudCkgPyBlbGVtZW50IDogbnVsbCk7XG4gICAgfSk7XG4gICAgY2IgPSAoKSA9PiBnZXRSZW1haW5pbmdFbGVtZW50cy5tYXAoKGMpID0+IGMoKSkuZmluZChCb29sZWFuKSBhcyB1bmtub3duIGFzIFQ7XG4gIH0gZWxzZSB7XG4gICAgY2IgPSBjYWxsYmFjayBhcyAoKSA9PiBUO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IGR0bFdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQoKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGNiKCk7XG4gICAgZGV0ZWN0Q2hhbmdlcygpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBjbGVhbnVwKCkge1xuICBtb3VudGVkRml4dHVyZXMuZm9yRWFjaChjbGVhbnVwQXRGaXh0dXJlKTtcbn1cblxuZnVuY3Rpb24gY2xlYW51cEF0Rml4dHVyZShmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPGFueT4pIHtcbiAgZml4dHVyZS5kZXN0cm95KCk7XG5cbiAgaWYgKCFmaXh0dXJlLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCduZy12ZXJzaW9uJykgJiYgZml4dHVyZS5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGUgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGZpeHR1cmUubmF0aXZlRWxlbWVudCk7XG4gIH1cbiAgbW91bnRlZEZpeHR1cmVzLmRlbGV0ZShmaXh0dXJlKTtcbn1cblxuLy8gaWYgd2UncmUgcnVubmluZyBpbiBhIHRlc3QgcnVubmVyIHRoYXQgc3VwcG9ydHMgYWZ0ZXJFYWNoXG4vLyB0aGVuIHdlJ2xsIGF1dG9tYXRpY2FsbHkgcnVuIGNsZWFudXAgYWZ0ZXJFYWNoIHRlc3Rcbi8vIHRoaXMgZW5zdXJlcyB0aGF0IHRlc3RzIHJ1biBpbiBpc29sYXRpb24gZnJvbSBlYWNoIG90aGVyXG4vLyBpZiB5b3UgZG9uJ3QgbGlrZSB0aGlzLCBzZXQgdGhlIEFUTF9TS0lQX0FVVE9fQ0xFQU5VUCBlbnYgdmFyaWFibGUgdG8gJ3RydWUnXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8ICFwcm9jZXNzLmVudj8uQVRMX1NLSVBfQVVUT19DTEVBTlVQKSB7XG4gIGlmICh0eXBlb2YgYWZ0ZXJFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICB9KTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHsgc2VsZWN0b3I6ICdhdGwtd3JhcHBlci1jb21wb25lbnQnLCB0ZW1wbGF0ZTogJycgfSlcbmNsYXNzIFdyYXBwZXJDb21wb25lbnQge31cblxuLyoqXG4gKiBXcmFwIGZpbmRCeSBxdWVyaWVzIHRvIHBva2UgdGhlIEFuZ3VsYXIgY2hhbmdlIGRldGVjdGlvbiBjeWNsZVxuICovXG5mdW5jdGlvbiByZXBsYWNlRmluZFdpdGhGaW5kQW5kRGV0ZWN0Q2hhbmdlczxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55Pj4ob3JpZ2luYWxRdWVyaWVzRm9yQ29udGFpbmVyOiBUKTogVCB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvcmlnaW5hbFF1ZXJpZXNGb3JDb250YWluZXIpLnJlZHVjZSgobmV3UXVlcmllcywga2V5KSA9PiB7XG4gICAgY29uc3QgZ2V0QnlRdWVyeSA9IG9yaWdpbmFsUXVlcmllc0ZvckNvbnRhaW5lcltrZXkucmVwbGFjZSgnZmluZCcsICdnZXQnKV07XG4gICAgaWYgKGtleS5zdGFydHNXaXRoKCdmaW5kJykgJiYgZ2V0QnlRdWVyeSkge1xuICAgICAgbmV3UXVlcmllc1trZXldID0gYXN5bmMgKC4uLnF1ZXJ5T3B0aW9uczogYW55W10pID0+IHtcbiAgICAgICAgY29uc3Qgd2FpdE9wdGlvbnMgPSBxdWVyeU9wdGlvbnMubGVuZ3RoID09PSAzID8gcXVlcnlPcHRpb25zLnBvcCgpIDogdW5kZWZpbmVkO1xuICAgICAgICAvLyBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiBhdCBodHRwczovL2dpdGh1Yi5jb20vdGVzdGluZy1saWJyYXJ5L2RvbS10ZXN0aW5nLWxpYnJhcnkvYmxvYi9tYWluL3NyYy9xdWVyeS1oZWxwZXJzLmpzXG4gICAgICAgIHJldHVybiBhd2FpdCB3YWl0Rm9yV3JhcHBlcihkZXRlY3RDaGFuZ2VzRm9yTW91bnRlZEZpeHR1cmVzLCAoKSA9PiBnZXRCeVF1ZXJ5KC4uLnF1ZXJ5T3B0aW9ucyksIHdhaXRPcHRpb25zKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1F1ZXJpZXNba2V5XSA9IG9yaWdpbmFsUXVlcmllc0ZvckNvbnRhaW5lcltrZXldO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdRdWVyaWVzO1xuICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KSBhcyBUO1xufVxuXG4vKipcbiAqIENhbGwgZGV0ZWN0Q2hhbmdlcyBmb3IgYWxsIGZpeHR1cmVzXG4gKi9cbmZ1bmN0aW9uIGRldGVjdENoYW5nZXNGb3JNb3VudGVkRml4dHVyZXMoKSB7XG4gIG1vdW50ZWRGaXh0dXJlcy5mb3JFYWNoKChmaXh0dXJlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgICBpZiAoIWVyci5tZXNzYWdlLnN0YXJ0c1dpdGgoJ1ZpZXdEZXN0cm95ZWRFcnJvcicpKSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFJlLWV4cG9ydCBzY3JlZW4gd2l0aCBwYXRjaGVkIHF1ZXJpZXNcbiAqL1xuY29uc3Qgc2NyZWVuID0gcmVwbGFjZUZpbmRXaXRoRmluZEFuZERldGVjdENoYW5nZXMoZHRsU2NyZWVuKTtcblxuLyoqXG4gKiBSZS1leHBvcnQgd2l0aGluIHdpdGggcGF0Y2hlZCBxdWVyaWVzXG4gKi9cbmNvbnN0IHdpdGhpbiA9IDxRdWVyaWVzVG9CaW5kIGV4dGVuZHMgUXVlcmllcyA9IHR5cGVvZiBkdGxRdWVyaWVzLCBUIGV4dGVuZHMgUXVlcmllc1RvQmluZCA9IFF1ZXJpZXNUb0JpbmQ+KFxuICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgcXVlcmllc1RvQmluZD86IFQsXG4pOiBCb3VuZEZ1bmN0aW9uczxUPiA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGR0bFdpdGhpbjxUPihlbGVtZW50LCBxdWVyaWVzVG9CaW5kKTtcbiAgcmV0dXJuIHJlcGxhY2VGaW5kV2l0aEZpbmRBbmREZXRlY3RDaGFuZ2VzKGNvbnRhaW5lcik7XG59O1xuXG4vKipcbiAqIFJlLWV4cG9ydCB3YWl0Rm9yIHdpdGggcGF0Y2hlZCB3YWl0Rm9yXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHdhaXRGb3I8VD4oY2FsbGJhY2s6ICgpID0+IFQgZXh0ZW5kcyBQcm9taXNlPGFueT4gPyBuZXZlciA6IFQsIG9wdGlvbnM/OiBkdGxXYWl0Rm9yT3B0aW9ucyk6IFByb21pc2U8VD4ge1xuICByZXR1cm4gd2FpdEZvcldyYXBwZXIoZGV0ZWN0Q2hhbmdlc0Zvck1vdW50ZWRGaXh0dXJlcywgY2FsbGJhY2ssIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIFJlLWV4cG9ydCB3YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkIHdpdGggcGF0Y2hlZCB3YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQ8VD4oY2FsbGJhY2s6ICgoKSA9PiBUKSB8IFQsIG9wdGlvbnM/OiBkdGxXYWl0Rm9yT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZFdyYXBwZXIoZGV0ZWN0Q2hhbmdlc0Zvck1vdW50ZWRGaXh0dXJlcywgY2FsbGJhY2ssIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIE1hbnVhbGx5IGV4cG9ydCBvdGhlcndpc2Ugd2UgZ2V0IHRoZSBmb2xsb3dpbmcgZXJyb3Igd2hpbGUgcnVubmluZyBKZXN0IHRlc3RzXG4gKiBUeXBlRXJyb3I6IENhbm5vdCBzZXQgcHJvcGVydHkgZmlyZUV2ZW50IG9mIFtvYmplY3QgT2JqZWN0XSB3aGljaCBoYXMgb25seSBhIGdldHRlclxuICogZXhwb3J0cy5maXJlRXZlbnQgPSBmaXJlRXZlbnRcbiAqL1xuZXhwb3J0IHtcbiAgZmlyZUV2ZW50LFxuICBidWlsZFF1ZXJpZXMsXG4gIGdldEJ5TGFiZWxUZXh0LFxuICBnZXRBbGxCeUxhYmVsVGV4dCxcbiAgcXVlcnlCeUxhYmVsVGV4dCxcbiAgcXVlcnlBbGxCeUxhYmVsVGV4dCxcbiAgZmluZEJ5TGFiZWxUZXh0LFxuICBmaW5kQWxsQnlMYWJlbFRleHQsXG4gIGdldEJ5UGxhY2Vob2xkZXJUZXh0LFxuICBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCxcbiAgcXVlcnlCeVBsYWNlaG9sZGVyVGV4dCxcbiAgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCxcbiAgZmluZEJ5UGxhY2Vob2xkZXJUZXh0LFxuICBmaW5kQWxsQnlQbGFjZWhvbGRlclRleHQsXG4gIGdldEJ5VGV4dCxcbiAgZ2V0QWxsQnlUZXh0LFxuICBxdWVyeUJ5VGV4dCxcbiAgcXVlcnlBbGxCeVRleHQsXG4gIGZpbmRCeVRleHQsXG4gIGZpbmRBbGxCeVRleHQsXG4gIGdldEJ5QWx0VGV4dCxcbiAgZ2V0QWxsQnlBbHRUZXh0LFxuICBxdWVyeUJ5QWx0VGV4dCxcbiAgcXVlcnlBbGxCeUFsdFRleHQsXG4gIGZpbmRCeUFsdFRleHQsXG4gIGZpbmRBbGxCeUFsdFRleHQsXG4gIGdldEJ5VGl0bGUsXG4gIGdldEFsbEJ5VGl0bGUsXG4gIHF1ZXJ5QnlUaXRsZSxcbiAgcXVlcnlBbGxCeVRpdGxlLFxuICBmaW5kQnlUaXRsZSxcbiAgZmluZEFsbEJ5VGl0bGUsXG4gIGdldEJ5RGlzcGxheVZhbHVlLFxuICBnZXRBbGxCeURpc3BsYXlWYWx1ZSxcbiAgcXVlcnlCeURpc3BsYXlWYWx1ZSxcbiAgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZSxcbiAgZmluZEJ5RGlzcGxheVZhbHVlLFxuICBmaW5kQWxsQnlEaXNwbGF5VmFsdWUsXG4gIGdldEJ5Um9sZSxcbiAgZ2V0QWxsQnlSb2xlLFxuICBxdWVyeUJ5Um9sZSxcbiAgcXVlcnlBbGxCeVJvbGUsXG4gIGZpbmRCeVJvbGUsXG4gIGZpbmRBbGxCeVJvbGUsXG4gIGdldEJ5VGVzdElkLFxuICBnZXRBbGxCeVRlc3RJZCxcbiAgcXVlcnlCeVRlc3RJZCxcbiAgcXVlcnlBbGxCeVRlc3RJZCxcbiAgZmluZEJ5VGVzdElkLFxuICBmaW5kQWxsQnlUZXN0SWQsXG4gIGNyZWF0ZUV2ZW50LFxuICBnZXREZWZhdWx0Tm9ybWFsaXplcixcbiAgZ2V0RWxlbWVudEVycm9yLFxuICBnZXROb2RlVGV4dCxcbiAgZ2V0UXVlcmllc0ZvckVsZW1lbnQsXG4gIGdldFJvbGVzLFxuICBpc0luYWNjZXNzaWJsZSxcbiAgbG9nRE9NLFxuICBsb2dSb2xlcyxcbiAgcHJldHR5RE9NLFxuICBxdWVyaWVzLFxuICBxdWVyeUFsbEJ5QXR0cmlidXRlLFxuICBxdWVyeUJ5QXR0cmlidXRlLFxuICBxdWVyeUhlbHBlcnMsXG59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvZG9tJztcblxuLy8gZXhwb3J0IHBhdGNoZWQgZHRsXG5leHBvcnQgeyBzY3JlZW4sIHdhaXRGb3IsIHdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQsIHdpdGhpbiB9O1xuIl19